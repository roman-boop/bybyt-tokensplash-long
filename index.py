import re
from datetime import datetime
import pytz
from telethon.sync import TelegramClient, events
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.date import DateTrigger
from pybit.unified_trading import HTTP
import json
import os
import telebot
from decimal import Decimal


TOKEN = "________"  #token from telebot
bot = telebot.TeleBot(TOKEN)

#telegram api data
API_ID = ___________
API_HASH = '______________'
SESSION_NAME = "my_session"
CHANNEL = '@TokenSplashBybit'

# –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–∞ –∏ Result –¥–∞—Ç—ã
POST_REGEX = r'^(?P<token>\w+)\n.*?Result (?P<result_date>\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}) UTC' #–ø–∞—Ä—Å–∏–Ω–≥ –∏–∑ –∫–∞–Ω–∞–ª–∞ @TokenSplashBybit
TRADE_AMOUNT = 10  # USDT
TP1_PCT = 0.03
TP2_PCT = 0.06
STOP_LOSS_PCT = 0.02
scheduler = BackgroundScheduler(timezone=pytz.utc)
scheduler.start()
user_states = {}

USER_DATA_PATH = "user_data_tg"
os.makedirs(USER_DATA_PATH, exist_ok=True)
#GET USER + SAVE USER INFO
# ======================================================================================================================
def get_user_file(user_id):
    return os.path.join(USER_DATA_PATH, f"{user_id}.json")

def load_user_data(user_id):
    try:
        with open(get_user_file(user_id), 'r') as f:
            return json.load(f)
    except:
        return {}

def save_user_data(user_id, data):
    with open(get_user_file(user_id), 'w') as f:
        json.dump(data, f)


def get_all_user_ids():
    user_ids = []
    for filename in os.listdir(USER_DATA_PATH):
        if filename.endswith(".json"):
            try:
                user_id = int(filename.split(".")[0])
                user_ids.append(user_id)
            except:
                continue
    return user_ids

def notify_all_enabled_users(token):
    user_ids = get_all_user_ids()
    for uid in user_ids:
        data = load_user_data(uid)
        if data.get("bot_enabled"):
            long_token(uid, token_symbol=token)
            
            
            
def get_menu_markup(user_id):
    data = load_user_data(user_id)
    bot_enabled = data.get("bot_enabled", False)
    state_button = "üü¢ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω" if bot_enabled else "üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω"

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(state_button, "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
    markup.row("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    return markup




settings_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
settings_markup.row("API Key", "secret")
settings_markup.row("Leverage", "Margin")
settings_markup.row("–ù–∞–∑–∞–¥")


#MATH
def count_decimal_places(number: float) -> int:
    s = f"{number:.16f}".rstrip('0')  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å –∑–∞–ø–∞—Å–æ–º –∑–Ω–∞–∫–æ–≤, —É–±–∏—Ä–∞–µ–º —Ö–≤–æ—Å—Ç—è—â–∏–µ –Ω—É–ª–∏
    if '.' in s:
        return len(s.split('.')[1])
    else:
        return 0
    
    
#–ö–û–ú–ê–ù–î–´ –î–õ–Ø –ë–û–¢–ê
#=======================================================================================================================                         
@bot.message_handler(func=lambda msg: msg.text in ["üü¢ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω", "üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω"])
def toggle_bot_state(message):
    user_id = message.chat.id
    data = load_user_data(user_id)
    current_state = data.get("bot_enabled", False)
    data["bot_enabled"] = not current_state
    save_user_data(user_id, data)
    
    status = "–≤–∫–ª—é—á–µ–Ω" if data["bot_enabled"] else "–≤—ã–∫–ª—é—á–µ–Ω"
    bot.send_message(user_id, f"–ë–æ—Ç —Ç–µ–ø–µ—Ä—å {status}.", reply_markup=get_menu_markup(user_id))




@bot.message_handler(func=lambda msg: msg.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
def bot_info(message):
    user_id = message.chat.id
    info_text = (
        "–≠—Ç–æ —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è –±–∏—Ä–∂–∏ Bybit, —Ç–æ—Ä–≥—É—é—â–∏–π –≤ —à–æ—Ä—Ç –ª–∏—Å—Ç–∏–Ω–≥–∏.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∞—Ç—å –∏ –≤—ã–∫–ª—é—á–∞—Ç—å –±–æ—Ç–∞, –∞ —Ç–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏. –î–ª—è –≥—Ä–∞–º–æ—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤—Å—ë.\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å @perpetual_god."
    )
    bot.send_message(user_id, info_text, reply_markup=get_menu_markup(user_id))

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.chat.id
    bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_menu_markup(user_id))
 

@bot.message_handler(func=lambda msg: msg.text in ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"])
def handle_settings_menu(message):
    user_id = message.chat.id
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä:", reply_markup=settings_markup)

@bot.message_handler(func=lambda msg: msg.text in ["API Key", "secret", "Leverage", "Margin", "Stop", "Take"])
def ask_for_value(message):
    user_id = message.chat.id
    key = message.text.lower().replace(" ", "_")
    
    data = load_user_data(user_id)
    current_value = data.get(key, "(–Ω–µ –∑–∞–¥–∞–Ω–æ)")
    
    user_states[user_id] = key
    if message.text == 'Stop' or message.text == 'Take':
        bot.send_message(user_id, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π {message.text} –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏: {current_value}% —á–∏—Å—Ç–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    else:
        bot.send_message(user_id, f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {message.text}: {current_value}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")



@bot.message_handler(func=lambda msg: msg.text == "–ù–∞–∑–∞–¥")
def back_to_menu(message):
    user_id = message.chat.id
    bot.send_message(user_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é", reply_markup=get_menu_markup(user_id))
#============================================================================================================================


def fetch_new_tokens():
    new_tokens = []
    try:
        with TelegramClient(SESSION_NAME, API_ID, API_HASH) as client:
            print("[Telethon] –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞...")
            messages = client.get_messages(CHANNEL, limit=50)
            print(f"[Telethon] –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {len(messages)}")

            for msg in messages:
                if msg.text is None:
                    continue

                match = re.search(POST_REGEX, msg.text, re.DOTALL)
                if not match:
                    continue

                symbol = match.group('token').strip()
                result_date_str = match.group('result_date').strip()

                try:
                    result_dt = datetime.strptime(result_date_str, "%d.%m.%Y %H:%M")
                    result_dt = pytz.utc.localize(result_dt)
                except ValueError:
                    print(f"[Telethon] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É: {result_date_str}")
                    continue

                now = datetime.utcnow().replace(tzinfo=pytz.utc)
                if result_dt > now:
                    print(f"[Telethon] –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {symbol} (Result: {result_dt})")
                    new_tokens.append({
                        "symbol": symbol,
                        "result_time": result_dt
                    })
    except Exception as e:
        print(f"[Telethon] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")

    return new_tokens


def schedule_long(token_info):
    symbol = token_info["symbol"]
    run_time = token_info["result_time"]

    # –ù–∞–π—Ç–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "long_{symbol}_"
    existing_jobs = [job for job in scheduler.get_jobs() if job.id.startswith(f"long_{symbol}_")]
    if existing_jobs:
        print(f"[Scheduler] –ó–∞–¥–∞—á–∏ –¥–ª—è {symbol} —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.")
        return

    job_id = f"long_{symbol}_{run_time.strftime('%Y%m%d%H%M')}"
    print(f"[Scheduler] –ü–ª–∞–Ω–∏—Ä—É–µ–º –ª–æ–Ω–≥ –¥–ª—è {symbol} –Ω–∞ {run_time} (UTC)")
    scheduler.add_job(notify_all_enabled_users, trigger=DateTrigger(run_date=run_time), args=[symbol], id=job_id)

def long_token(user_id, token_symbol):
    print(f"‚ñ∂Ô∏è –õ–æ–Ω–≥ {token_symbol}")
    try:
        # 1. –ö—É–ø–∏—Ç—å 70%
        data = load_user_data(user_id)
        session = HTTP(api_key=data['api_key'], api_secret=data['secret'], recv_window=60000)
        
        res = session.get_tickers(category="linear", symbol=token_symbol)
        
        leverage = int(data.get("leverage", 5))
        margin = float(data.get("margin", 10))
        price = float(res['result']['list'][0]['lastPrice'])
        raw_qty = leverage * margin / price
        
        qty = get_valid_qty(session, token_symbol, raw_qty)
        
        # 2. –í—ã—Å—Ç–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç–Ω—ã–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
        mark_price = float(session.get_tickers(category="linear", symbol=token_symbol)["result"]["list"][0]["lastPrice"])
        precision = int(count_decimal_places(price))
        tp1 = round(mark_price * (1 + TP1_PCT), precision)
        tp2 = round(mark_price * (1 + TP2_PCT), precision)
        sl = round(mark_price * (1 - STOP_LOSS_PCT), precision)
        
        try:
            session.place_order(
                category="linear",
                symbol=token_symbol,
                side="Buy",
                order_type="Market",
                qty=round(qty * 0.7, 3),
                reduce_only=False,
                time_in_force="GoodTillCancel",
                stopLoss = sl
            )
        except Exception as e:
            try:
                session.place_order(
                category="linear",
                symbol=token_symbol,
                side="Buy",
                order_type="Market",
                qty=round(qty * 0.7, 1),
                reduce_only=False,
                time_in_force="GoodTillCancel",
                stopLoss = sl
            )
            except Exception as r:
                print(r)

    

        # 33% —Ç–µ–π–∫ –Ω–∞ 3%
        session.place_order(
            category="linear",
            symbol=token_symbol,
            side="Sell",
            order_type="Limit",
            qty=round(qty * 0.4, 2),
            price=tp1,
            reduce_only=True,
            time_in_force="GoodTillCancel"
        )

        # 33% —Ç–µ–π–∫ –Ω–∞ 6%
        session.place_order(
            category="linear",
            symbol=token_symbol,
            side="Sell",
            order_type="Limit",
            qty=round(qty * 0.3, 2),
            price=tp2,
            reduce_only=True,
            time_in_force="GoodTillCancel"
        )

        # –°—Ç–æ–ø –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫
        session.place_order(
            category="linear",
            symbol=token_symbol,
            side="Sell",
            order_type="StopMarket",
            stop_px=sl,
            qty=round(qty * 0.3, 2),
            reduce_only=True,
            time_in_force="GoodTillCancel",
            trigger_direction=1
        )
        
    except Exception as err:
        print('Error while placing order', err)
    
def get_valid_qty(session, symbol, raw_qty):
    try:
        info = session.get_instruments_info(category="linear", symbol=symbol)
        
        if 'result' not in info or 'list' not in info['result'] or not info['result']['list']:
            print(f"‚ùå –ü–∞—Ä–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ get_instruments_info.")
            return None

        lot_filter = info['result']['list'][0].get('lotSizeFilter', {})
        step = float(lot_filter.get('qtyStep', 0))
        min_qty = float(lot_filter.get('minOrderQty', 0))

        if step == 0:
            print(f"‚ùå qtyStep —Ä–∞–≤–µ–Ω 0 –¥–ª—è {symbol}")
            return None

        qty = max(raw_qty, min_qty)
        precision = abs(Decimal(str(step)).as_tuple().exponent)
        valid_qty = round(qty, precision-1)
       
            
        print(f"qty: {valid_qty}, step: {step}, min_qty: {min_qty}")
        return valid_qty
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –æ–±—ä–µ–º–∞ –¥–ª—è {symbol}: {e}")
        return None    

def main():
    # –ü–æ–ª—É—á–∞–µ–º –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã
    tokens = fetch_new_tokens()
    for token_info in tokens:
        schedule_long(token_info)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telethon –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
    client.start()

    @client.on(events.NewMessage(chats=CHANNEL))
    async def new_message_handler(event):
        text = event.message.message
        if text is None:
            return
        match = re.search(POST_REGEX, text, re.DOTALL)
        if not match:
            return

        symbol = match.group('token').strip()
        result_date_str = match.group('result_date').strip()
        try:
            result_dt = datetime.strptime(result_date_str, "%d.%m.%Y %H:%M")
            result_dt = pytz.utc.localize(result_dt)
        except ValueError:
            print(f"[Telethon] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏–∑ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {result_date_str}")
            return

        now = datetime.utcnow().replace(tzinfo=pytz.utc)
        if result_dt > now:
            print(f"[Telethon] –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–∑ —á–∞—Ç–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {symbol} (Result: {result_dt})")
            schedule_long({"symbol": symbol, "result_time": result_dt})

    print("[Telethon] –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
    client.run_until_disconnected()

# ================= –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –í–í–û–î–ê –ó–ù–ê–ß–ï–ù–ò–ô =====================
@bot.message_handler(func=lambda msg: True)
def catch_input(message):
    user_id = message.chat.id
    if user_id in user_states:
        key = user_states.pop(user_id)
        data = load_user_data(user_id)
        data[key] = message.text.strip()
        save_user_data(user_id, data)
        bot.send_message(user_id, f"{key} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä:", reply_markup=settings_markup)
        
        
def main():
    print("[Init] –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã...")
    for token in fetch_new_tokens():
        schedule_long(token)
    print("[Init] –ó–∞–ø—É—Å–∫–∞–µ–º polling –∏ scheduler")
    bot.polling(none_stop=True)

if __name__ == "__main__":
    main()





